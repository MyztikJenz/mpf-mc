name: Wheel Builder

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build for ${{ matrix.cibw-build }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: windows-latest
          python-version: 3.7
          cibw-build: cp37-win_amd64
        - os: windows-latest
          python-version: 3.8
          cibw-build: cp38-win_amd64
        - os: windows-latest
          python-version: 3.9
          cibw-build: cp39-win_amd64
        - os: ubuntu-latest
          python-version: 3.7
          cibw-build: cp37-manylinux_x86_64
        - os: ubuntu-latest
          python-version: 3.8
          cibw-build: cp38-manylinux_x86_64
        - os: ubuntu-latest
          python-version: 3.9
          cibw-build: cp39-manylinux_x86_64
        # - os: macos-latest     # Github hosted and self-hosted ARM runners are not yet available, so I'll just build locally for now.
        #   python-version: 3.8
        #   cibw-build: cp38-macosx_arm64
        # - os: macos-latest
        #   python-version: 3.9
        #   cibw-build: cp39-macosx_arm64
        - os: macos-latest
          python-version: 3.7
          cibw-build: cp37-macosx_x86_64
        - os: macos-latest
          python-version: 3.8
          cibw-build: cp38-macosx_x86_64
        - os: macos-latest
          python-version: 3.9
          cibw-build: cp39-macosx_x86_64

    steps:
      - name: Checkout MPF-MC
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
        
      - name: Install dependencies via brew
        if: runner.os == 'macOS'  
        run: brew install SDL2 SDL2_mixer SDL2_ttf SDL2_image gstreamer pkg-config
      
      - name: Install setup dependencies via pip
        run: |
              python -m pip install --upgrade pip
              pip install --upgrade setuptools wheel build

      - name: Run cibuildwheel
        uses: pypa/cibuildwheel@v2.8.1
        env:
          CIBW_BEFORE_ALL_LINUX:  # This is done here and not as its own step as this runs inside the cibw containered environment
            yum install -y SDL2.x86_64 SDL2-devel.x86_64 SDL2_image.x86_64 SDL2_image-devel.x86_64 SDL2_mixer.x86_64 SDL2_mixer-devel.x86_64 SDL2_ttf.x86_64 SDL2_ttf-devel.x86_64 gstreamer1.x86_64 gstreamer1-devel.x86_64
          CIBW_BUILD: ${{ matrix.cibw-build }}
          CIBW_BUILD_VERBOSITY: 3

      - uses: actions/upload-artifact@v3
        with:
          name: mpf-mc_wheels
          path: ./wheelhouse/*.whl

  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Build SDist
      run: |
        sudo apt-get update
        sudo apt-get -y install python3.9 python3-pip build-essential git python3-dev libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev libsdl2-mixer-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-base gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly libgstreamer1.0-dev libxine2-ffmpeg libsmpeg-dev libswscale-dev libavformat-dev libavcodec-dev libjpeg-dev libtiff5-dev libx11-dev libmtdev-dev libgl1-mesa-dev libgles2-mesa-dev xvfb pulseaudio
        pip install --upgrade setuptools wheel build
        python -m build --sdist

    - uses: actions/upload-artifact@v3
      with:
        name: mpf-mc_wheels
        path: dist/*.tar.gz

  # I cannot get the CIBW testing to work, so I rolled my own
  # This is maybe better since it validates the user-facing install process in a fresh env
  # For this test_all to work, the download must not contain the sdist or it will try to build it again ;)

  test_integration:
    name: MPF and MPF-MC Integration Tests
    needs: [build_wheels]
    runs-on: ubuntu-latest

    steps:
    - name: Install runtime library dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install libsdl2-2.0 libsdl2-mixer-2.0 gstreamer-1.0 gstreamer1.0-plugins-base gstreamer1.0-plugins-base gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly

    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Checkout MPF-MC
      uses: actions/checkout@v3

    - name: Install Python runtime dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel build

    - name: Clone & install MPF
      run: |
        git clone --recursive --branch ${{ github.ref_name }} https://github.com/missionpinball/mpf.git _mpf || git clone --recursive --branch `python get_version.py` https://github.com/missionpinball/mpf.git _mpf || git clone --recursive --branch dev https://github.com/missionpinball/mpf.git _mpf
        pip install -e _mpf

    - name: Download the newly-built wheel
      uses: actions/download-artifact@v3
      with:
        name: mpf-mc_wheels
        path: dist
  
    - name: Install MPF-MC from new wheel
      run: |
        pip install --pre --find-links=dist mpf-mc

    - name: Run integration tests
      run: |
        docker run -v $PWD:$PWD -v /dev/snd:/dev/snd --privileged -w $PWD $LINUX /bin/sh -c "export DEBIAN_FRONTEND=noninteractive; _mpf_installer/install-mpf-dependencies && _mpf_installer/install-mc-dependencies && pip3 install --upgrade coveralls && pip3 install prospector==1.3.1 && apt-get -y install xvfb && pip3 install -e _mpf/ && pip3 install -e . && export DISPLAY=:99.0 && /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1280x720x24 -ac +extension GLX && export PYTHONPATH=$PYTHONPATH:$(pwd) && coverage3 run --concurrency=thread -m unittest discover -s mpfmc/tests && prospector && coverage3 run -a --concurrency=thread -m unittest discover -s mpfmc/integration;";

# pip install --upgrade coveralls

# pip install prospector==1.3.1

# apt-get -y install xvfb

# pip install -e _mpf/

# pip install -e .

# export DISPLAY=:99.0

# /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1280x720x24 -ac +extension GLX

# export PYTHONPATH=$PYTHONPATH:$(pwd)

# coverage3 run --concurrency=thread -m unittest discover -s mpfmc/tests

# prospector

# coverage3 run -a --concurrency=thread -m unittest discover -s mpfmc/integration;

  test_wheels:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    needs: [build_wheels]
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install runtime dependencies via brew
      if: runner.os == 'macOS'  
      run: brew install SDL2 SDL2_mixer gstreamer
      
    - name: Install runtime dependencies via apt-get
      if: runner.os == 'linux'  
      run: |
        sudo apt-get update
        sudo apt-get -y install libsdl2-2.0 libsdl2-mixer-2.0 gstreamer-1.0 gstreamer1.0-plugins-base gstreamer1.0-plugins-base gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly
    
    - name: Install runtime dependencies via pip
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel build
    
    - name: Download the newly-built wheel
      uses: actions/download-artifact@v3
      with:
        name: mpf-mc_wheels
        path: dist
    
    - name: Install MPF-MC from new wheel
      run: |
        pwd
        pip install --pre --find-links=dist mpf-mc

    - name: Run tests
      run: python -m unittest discover mpfmc
    
    # TODO add a coverage step (only needed on a single run)

  publish_to_pypi:  # only if this release has a tag and is a push from us (e.g. not a pull request)
    needs: [test_wheels, make_sdist, test_integration]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: artifact
        path: dist

    - uses: pypa/gh-action-pypi-publish@v1.5.0
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
